#!/usr/bin/env python2
import argparse
import os
import subprocess
import shlex
import sys
import getpass

import jujuclient

import utils

hosts_file = os.path.expanduser('~/.juju-hosts')
juju_home = os.path.expanduser(os.environ.get('JUJU_HOME', '~/.juju'))
environments = os.path.join(juju_home, 'environments')
dbus_cmd = (
    "dbus-send --system --dest=org.freedesktop.NetworkManager.dnsmasq "
    "/uk/org/thekelleys/dnsmasq "
    "org.freedesktop.NetworkManager.dnsmasq.ClearCache"
)

install_script_template = """
set -ex;
# add that file as additional hosts file
touch {hosts_file}
echo "addn-hosts={hosts_file}" | sudo tee /etc/NetworkManager/dnsmasq.d/juju-local-dns-{user}.conf
echo "
<busconfig>
    <policy user="{user}">
        <allow send_destination="org.freedesktop.NetworkManager.dnsmasq"
               send_interface="org.freedesktop.NetworkManager.dnsmasq"
               send_member="ClearCache"
        />
    </policy>
</busconfig>
" | sudo tee /etc/dbus-1/system.d/{user}-dnsmasq.conf
# create cron
(crontab -u {user} -l; echo "1 * * * * {name}" ) | crontab -u {user} -
sudo service dbus reload
sudo service network-manager restart
""".strip()

description = """
Update local dnsmasq to have records for juju units.

WARNING: this is a devlopment tool and not secure, do not use in production.
"""

epilog = """
Notes:

Some setup is required by root. The specified user will be able
to:

 a) add additional hosts in {1}
 b) use dbus to clear the system dnsmasq cache

It will also set up a user cron to run every minute to generate up-to-date
records

To install the files:

# check script first
{0} --install-script [--user=foo]
# then
{0} --install-script [--user=foo] | bash


""".format(sys.argv[0], hosts_file)


def dns(name):
    return name.replace('/', '-')


def get_juju_records(envs):
    for env in envs:
        client = jujuclient.Environment.connect(env)
        status = client.get_stat()

        yield None, env + " juju environment"

        for svc_name, svc in status['services'].items():
            if 'units' in svc:
                for unit_name, unit in svc['units'].items():
                    ip = unit['public-address']
                    # TODO add private address as separate entries
                    if unit_name.endswith('/0'):
                        yield ip, svc_name
                    yield ip, unit_name


def get_lxc_records():
    "Convienience for naked lxc dns, which is hard to do right with lxc-net"
    dhcp = '/var/lib/misc/dnsmasq.lxcbr0.leases'
    if not os.path.exists(dhcp):
        return

    yield None, "lxc dhcp leases"
    with open('/var/lib/misc/dnsmasq.lxcbr0.leases') as f:
        for line in f:
            _, _, ip, name, _ = line.split()
            yield ip, name


def write_records(records):
    with open(hosts_file, 'w') as f:
        for ip, name in records:
            if ip is None:
                f.write('# {}\n'.format(name))
            else:
                f.write(ip + ' ' + dns(name) + '\n')


if __name__ == '__main__':

    parser = utils.juju_arg_parser(
        description=description,
        epilog=epilog,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument('--install-script', action='store_true',
                        help='output install script')
    parser.add_argument('--user', '-u', default=getpass.getuser(),
                        help='user to allow to modify dns settings. '
                        'Defaults to installing user\'s user, '
                        'used with --install-script')
    args = parser.parse_args()

    if args.install_script:
        print(install_script_template.format(
            hosts_file=hosts_file,
            user=args.user,
            name=sys.argv[0],
        ))
        sys.exit(0)

    envs = {e.split('.')[0] for e in os.listdir(environments)}
    try:
        records = list(get_juju_records(envs))
        #records.extend(get_lxc_records())
        write_records(records)
    except OSError as e:
        sys.stderr.write('Perhaps you need to use --install-script? '
                         'See {} --help for more'.format(sys.argv[0]))
        raise e

    else:
        subprocess.check_call(shlex.split(dbus_cmd))
