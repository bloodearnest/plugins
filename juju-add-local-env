#!/usr/bin/env python2
from collections import OrderedDict
import os
import sys
import yaml

import utils


def represent_ordereddict(dumper, data):
    value = []

    for item_key, item_value in data.items():
        node_key = dumper.represent_data(item_key)
        node_value = dumper.represent_data(item_value)

        value.append((node_key, node_value))

    return yaml.nodes.MappingNode(u'tag:yaml.org,2002:map', value)

yaml.add_representer(OrderedDict, represent_ordereddict)


if __name__ == '__main__':

    parser = utils.juju_arg_parser(
        description="Add a new local environment to environments.yaml"
    )
    parser.add_argument('name', help='name of local to add')
    parser.add_argument('--secret', '-s',
                        help='admin-secret to use (defaults to name)')

    args = parser.parse_args()
    if args.secret is None:
        args.secret = args.name

    juju_home = os.environ.get('JUJU_HOME', '~/.juju')
    env_file = os.path.join(juju_home, 'environments.yaml')

    with open(env_file) as f:
        env_config = yaml.safe_load(f)

    if args.name in env_config['environments']:
        print("Environment called {} already exists".format(args.name))
        sys.exit(1)

    # default ports
    ports = OrderedDict()
    ports['api-port'] = 17070
    ports['state-port'] = 37017
    ports['storage-port'] = 8040
    ports['syslog-port'] = 6514
    apt_proxy = None

    for name, env in env_config['environments'].items():
        if env['type'] == 'local':
            for port, current in ports.items():
                ports[port] = max(current, env.get(port, 0))
            apt_proxy = env.get('apt-http-proxy', None) or apt_proxy

    new_env = OrderedDict()
    new_env['name'] = args.name
    new_env['type'] = 'local'
    new_env['admin-secret'] = args.secret
    for name, port in ports.items():
        new_env[name] = port + 1
    new_env['enable-os-refresh-update'] = False
    new_env['enable-os-upgrade'] = False
    if apt_proxy is not None:
        new_env['apt-http-proxy'] = apt_proxy

    fragment = yaml.dump({args.name: new_env}, indent=4)
    indented = '\n'.join('    ' + line for line in fragment.split('\n'))

    print('adding the following to environments.yaml')
    print(indented)

    with open(env_file, 'a') as f:
        f.write('\n')
        f.write('    # added by juju-add-local-env\n')
        f.write(indented)
